<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">

	<!-- Appenders -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
	<!-- 전달받은 로그를 어디에 출력할지 결정함. (콘솔출력, 파일저장, 데이터베이스 저장 등) -->
		<encoder>
		<!-- appender에 포함되어 출력할 로그의 형식을 지정합니다. -->
			<Pattern>%d %5p [%c] %m%n</Pattern>
		</encoder>
	</appender>

	<appender name="console-infolog" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<Pattern>%d %5p %m%n</Pattern>
		</encoder>
	</appender>

	<!-- Logger -->
	<!-- 로그를 출력하는 요소. 
		level속성을 통해 출력할 로그의 레벨을 조절하여 appender에 전달. -->
	<logger name="com.board" level="DEBUG" appender-ref="console" />
	<logger name="jdbc.sqlonly" level="INFO" appender-ref="console-infolog" />
	<logger name="jdbc.resultsettable" level="INFO" appender-ref="console-infolog" />
		
	<!-- 로그의 level -->
	<!-- fatal: 아주 심각한 에러가 발생한 상태를 나타냄.
		 error: 요청을 처리하던 중 문제가 발생한 상태를 나타냄.
		 warn: 프로그램 실행에는 문제가 없지만, 나중에 시스템 에러의 원인이 될 수 있는 경고성 메시지를 나타냄.
		 info: 어떠한 상태 변경과 같은 정보성 메세지를 나타냄.
		 debug: 개발 시에 디버그 용도로 사용하는 메세지.
		 trace: 디버그 레벨이 너무 광범위한 것을 해결하기 위해 좀 더 상세한 이벤트를 나타냄. -->
	<!-- 로그의 타입 -->
	<!-- sqlonly: SQL을 로그로 남기며, Prepared Statement와 관련된 파라미터는 자동으로 변경되어 SQL을 출력함.
		 sqltiming: SQL과 SQL실행시간을 출력한다.
		 audit: ResultSet을 제외한 모든 JDBC 호출 정보를 출력함.(JDBC관련문제 제외 사용권장X)
		 resultset: ResultSet을 포함한 모든 JDBC호출 정보를 출력함.
		 resultsettable: SQL 조회 결과를 테이블 형태로 출력함.
		 connection: Connection의 연결과 종료에 관련된 로그를 출력함. -->

	<!-- Root Logger -->
	<root level="off">
		<appender-ref ref="console" />
	</root>
</configuration>